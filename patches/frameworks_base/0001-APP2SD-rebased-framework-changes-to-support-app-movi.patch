From 36a23fcef132795215dafe23cad11cf733bc4475 Mon Sep 17 00:00:00 2001
From: Shubhang Rathore <shubhang92@gmail.com>
Date: Fri, 25 Jul 2014 22:08:23 +0530
Subject: [PATCH] APP2SD: rebased framework changes to support app moving

Change-Id: I4653023278a4ade68c6d4dec5c5da235baa0ae8e
---
 core/java/android/os/Environment.java              | 77 ++++++++++++++++++++++
 core/java/android/os/storage/StorageVolume.java    | 31 ++++++++-
 .../com/android/internal/util/slim/AppMoving.java  | 51 ++++++++++++++
 core/res/res/values/attrs.xml                      |  2 +
 .../defcontainer/DefaultContainerService.java      | 19 +++---
 services/java/com/android/server/MountService.java | 24 +++++--
 6 files changed, 189 insertions(+), 15 deletions(-)
 create mode 100644 core/java/com/android/internal/util/slim/AppMoving.java

diff --git a/core/java/android/os/Environment.java b/core/java/android/os/Environment.java
index a3350da..a4e5fe0 100644
--- a/core/java/android/os/Environment.java
+++ b/core/java/android/os/Environment.java
@@ -278,6 +278,83 @@ public class Environment {
     }
 
     /**
+     * Gets an external volume that supports having external apps.
+     * If such a volume does not exist (eg. devices that do not have an SD card
+     * and do not support USB-OTG), then null is returned.
+     * @return StorageVolume object representing a volume supporting external apps.
+     * @hide
+     */
+    private static StorageVolume getExternalAppsVolume() {
+        try {
+            IMountService mountService = IMountService.Stub.asInterface(ServiceManager
+                    .getService("mount"));
+            final StorageVolume[] volumes = mountService.getVolumeList();
+            for (StorageVolume volume : volumes) {
+                if (volume.isExternalApps()) {
+                    Log.v(TAG, "Found external apps volume: " + volume.getPath());
+                    return volume;
+                }
+            }
+        } catch (Exception e) {
+            Log.e(TAG, "couldn't talk to MountService", e);
+        }
+        return null;
+    }
+
+    /**
+     * Determine if there is a volume supporting external apps and if it's mounted.
+     * @return True if an external apps volume exists and is mounted, otherwise, false.
+     * @hide
+     */
+    public static boolean isExternalAppsAvailableAndMounted() {
+        if (getExternalAppsVolume() != null) {
+            String state = getExternalAppsVolumeState();
+
+            if (state.equals(MEDIA_MOUNTED)) {
+                final File temp = new File("/data/system/no-external-apps");
+                if (temp.exists()) {
+                    Log.v(TAG, "Application moving was explicitly disabled");
+                    return false;
+                }
+                return true;
+            }
+        } else {
+            Log.v(TAG, "External apps volume is NOT available");
+        }
+        return false;
+    }
+
+    /**
+     * Gets the current state of the external apps volume.
+     * @see #getExternalAppsVolumeDirectory()
+     * @return String containing the state of the external apps volume.
+     * @hide
+     */
+    public static String getExternalAppsVolumeState() {
+        try {
+            IMountService mountService = IMountService.Stub.asInterface(ServiceManager
+                    .getService("mount"));
+            return mountService.getVolumeState(getExternalAppsVolume().getPath());
+        } catch (RemoteException rex) {
+            Log.w(TAG, "Failed to read external SD state; assuming REMOVED: " + rex);
+            return Environment.MEDIA_REMOVED;
+        }
+    }
+
+    /**
+     * Gets the mount point/directory of the external apps volume.
+     * @return File object for the directory of the external apps volume.
+     * @hide
+     */
+    public static File getExternalAppsVolumeDirectory() {
+        StorageVolume volume = getExternalAppsVolume();
+        if (volume != null) {
+          return new File(volume.getPath());
+        }
+        return null;
+    }
+
+    /**
      * Return directory used for internal media storage, which is protected by
      * {@link android.Manifest.permission#WRITE_MEDIA_STORAGE}.
      *
diff --git a/core/java/android/os/storage/StorageVolume.java b/core/java/android/os/storage/StorageVolume.java
index 06565f1..1328d25 100644
--- a/core/java/android/os/storage/StorageVolume.java
+++ b/core/java/android/os/storage/StorageVolume.java
@@ -48,6 +48,7 @@ public class StorageVolume implements Parcelable {
     private final long mMaxFileSize;
     /** When set, indicates exclusive ownership of this volume */
     private final UserHandle mOwner;
+    private final boolean mExternalApps;
 
     private String mUuid;
     private String mUserLabel;
@@ -70,6 +71,22 @@ public class StorageVolume implements Parcelable {
         mAllowMassStorage = allowMassStorage;
         mMaxFileSize = maxFileSize;
         mOwner = owner;
+        mExternalApps = false;
+    }
+
+    public StorageVolume(File path, int descriptionId, boolean primary, boolean removable,
+            boolean emulated, int mtpReserveSpace, boolean allowMassStorage, long maxFileSize,
+            UserHandle owner, boolean externalApps) {
+        mPath = path;
+        mDescriptionId = descriptionId;
+        mPrimary = primary;
+        mRemovable = removable;
+        mEmulated = emulated;
+        mMtpReserveSpace = mtpReserveSpace;
+        mAllowMassStorage = allowMassStorage;
+        mMaxFileSize = maxFileSize;
+        mOwner = owner;
+        mExternalApps = externalApps;
     }
 
     private StorageVolume(Parcel in) {
@@ -83,6 +100,7 @@ public class StorageVolume implements Parcelable {
         mAllowMassStorage = in.readInt() != 0;
         mMaxFileSize = in.readLong();
         mOwner = in.readParcelable(null);
+        mExternalApps = in.readInt() != 0;
         mUuid = in.readString();
         mUserLabel = in.readString();
         mState = in.readString();
@@ -91,7 +109,7 @@ public class StorageVolume implements Parcelable {
     public static StorageVolume fromTemplate(StorageVolume template, File path, UserHandle owner) {
         return new StorageVolume(path, template.mDescriptionId, template.mPrimary,
                 template.mRemovable, template.mEmulated, template.mMtpReserveSpace,
-                template.mAllowMassStorage, template.mMaxFileSize, owner);
+                template.mAllowMassStorage, template.mMaxFileSize, owner, template.mExternalApps);
     }
 
     /**
@@ -143,6 +161,15 @@ public class StorageVolume implements Parcelable {
     }
 
     /**
+     * Returns true if the volume supports external apps.
+     *
+     * @return supports external apps
+     */
+    public boolean isExternalApps() {
+        return mExternalApps;
+    }
+
+    /**
      * Returns the MTP storage ID for the volume.
      * this is also used for the storage_id column in the media provider.
      *
@@ -272,6 +299,7 @@ public class StorageVolume implements Parcelable {
         pw.printPair("mAllowMassStorage", mAllowMassStorage);
         pw.printPair("mMaxFileSize", mMaxFileSize);
         pw.printPair("mOwner", mOwner);
+        pw.printPair("mExternalApps", mExternalApps);
         pw.printPair("mUuid", mUuid);
         pw.printPair("mUserLabel", mUserLabel);
         pw.printPair("mState", mState);
@@ -307,6 +335,7 @@ public class StorageVolume implements Parcelable {
         parcel.writeInt(mAllowMassStorage ? 1 : 0);
         parcel.writeLong(mMaxFileSize);
         parcel.writeParcelable(mOwner, flags);
+        parcel.writeInt(mExternalApps ? 1 : 0);
         parcel.writeString(mUuid);
         parcel.writeString(mUserLabel);
         parcel.writeString(mState);
diff --git a/core/java/com/android/internal/util/slim/AppMoving.java b/core/java/com/android/internal/util/slim/AppMoving.java
new file mode 100644
index 0000000..42ea6b7
--- /dev/null
+++ b/core/java/com/android/internal/util/slim/AppMoving.java
@@ -0,0 +1,51 @@
+/*
+* Copyright (C) 2014 SlimRoms Project
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+* http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+package com.android.internal.util.slim;
+
+import android.util.Log;
+
+import java.io.File;
+import java.io.IOException;
+
+public class AppMoving {
+    private static final String TAG = "AppMoving";
+    private static final String DISABLE_FILE = "/data/system/no-external-apps";
+
+    public static boolean isEnabled() {
+        return !new File(DISABLE_FILE).exists();
+    }
+
+    private static void removeFile() {
+        new File(DISABLE_FILE).delete();
+    }
+
+    private static void createFile() {
+        try {
+            new File(DISABLE_FILE).createNewFile();
+        } catch (IOException e) {
+            Log.e(TAG, "Failed to create " + DISABLE_FILE + ": " + e.getMessage());
+        }
+    }
+
+    public static synchronized void setEnabled(boolean enable) {
+        if (enable) {
+            removeFile();
+        } else {
+            createFile();
+        }
+    }
+}
diff --git a/core/res/res/values/attrs.xml b/core/res/res/values/attrs.xml
index 43f64ef..06d77ea 100644
--- a/core/res/res/values/attrs.xml
+++ b/core/res/res/values/attrs.xml
@@ -6008,6 +6008,8 @@
         <attr name="allowMassStorage" format="boolean" />
         <!-- maximum file size for the volume in megabytes, zero or unspecified if it is unbounded -->
         <attr name="maxFileSize" format="integer" />
+        <!-- true if volume supports external apps -->
+        <attr name="externalApps" format="boolean" />
     </declare-styleable>
 
     <declare-styleable name="SwitchPreference">
diff --git a/packages/DefaultContainerService/src/com/android/defcontainer/DefaultContainerService.java b/packages/DefaultContainerService/src/com/android/defcontainer/DefaultContainerService.java
index 13e1030..6031117 100644
--- a/packages/DefaultContainerService/src/com/android/defcontainer/DefaultContainerService.java
+++ b/packages/DefaultContainerService/src/com/android/defcontainer/DefaultContainerService.java
@@ -234,7 +234,7 @@ public class DefaultContainerService extends IntentService {
         public long calculateDirectorySize(String path) throws RemoteException {
             Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);
 
-            final File dir = Environment.maybeTranslateEmulatedPathToInternal(new File(path));
+            final File dir = new File(path);
             if (dir.exists() && dir.isDirectory()) {
                 final String targetPath = dir.getAbsolutePath();
                 return MeasurementUtils.measureDirectory(targetPath);
@@ -764,7 +764,7 @@ public class DefaultContainerService extends IntentService {
             prefer = PREFER_INTERNAL;
         }
 
-        final boolean emulated = Environment.isExternalStorageEmulated();
+        final boolean externalApps = Environment.isExternalAppsAvailableAndMounted();
 
         final File apkFile = new File(archiveFilePath);
 
@@ -778,7 +778,7 @@ public class DefaultContainerService extends IntentService {
         }
 
         boolean fitsOnSd = false;
-        if (!emulated && (checkBoth || prefer == PREFER_EXTERNAL)) {
+        if (externalApps && (checkBoth || prefer == PREFER_EXTERNAL)) {
             try {
                 fitsOnSd = isUnderExternalThreshold(apkFile, isForwardLocked);
             } catch (IOException e) {
@@ -790,7 +790,7 @@ public class DefaultContainerService extends IntentService {
             if (fitsOnInternal) {
                 return PackageHelper.RECOMMEND_INSTALL_INTERNAL;
             }
-        } else if (!emulated && prefer == PREFER_EXTERNAL) {
+        } else if (externalApps && prefer == PREFER_EXTERNAL) {
             if (fitsOnSd) {
                 return PackageHelper.RECOMMEND_INSTALL_EXTERNAL;
             }
@@ -799,7 +799,7 @@ public class DefaultContainerService extends IntentService {
         if (checkBoth) {
             if (fitsOnInternal) {
                 return PackageHelper.RECOMMEND_INSTALL_INTERNAL;
-            } else if (!emulated && fitsOnSd) {
+            } else if (externalApps && fitsOnSd) {
                 return PackageHelper.RECOMMEND_INSTALL_EXTERNAL;
             }
         }
@@ -809,7 +809,7 @@ public class DefaultContainerService extends IntentService {
          * the media was unavailable. Otherwise, indicate there was insufficient
          * storage space available.
          */
-        if (!emulated && (checkBoth || prefer == PREFER_EXTERNAL)
+        if (externalApps && (checkBoth || prefer == PREFER_EXTERNAL)
                 && !Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) {
             return PackageHelper.RECOMMEND_MEDIA_UNAVAILABLE;
         } else {
@@ -853,15 +853,16 @@ public class DefaultContainerService extends IntentService {
      */
     private boolean isUnderExternalThreshold(File apkFile, boolean isForwardLocked)
             throws IOException {
-        if (Environment.isExternalStorageEmulated()) {
+        if (!Environment.isExternalAppsAvailableAndMounted()) {
             return false;
         }
 
         final int sizeMb = calculateContainerSize(apkFile, isForwardLocked);
 
         final int availSdMb;
-        if (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) {
-            final StatFs sdStats = new StatFs(Environment.getExternalStorageDirectory().getPath());
+        if (Environment.MEDIA_MOUNTED.equals(Environment.getExternalAppsVolumeState())) {
+            final StatFs sdStats = new StatFs(
+                    Environment.getExternalAppsVolumeDirectory().getPath());
             final int blocksToMb = (1 << 20) / sdStats.getBlockSize();
             availSdMb = sdStats.getAvailableBlocks() / blocksToMb;
         } else {
diff --git a/services/java/com/android/server/MountService.java b/services/java/com/android/server/MountService.java
index 18344bd..5e6a9d1 100644
--- a/services/java/com/android/server/MountService.java
+++ b/services/java/com/android/server/MountService.java
@@ -704,7 +704,7 @@ class MountService extends IMountService.Stub
 
         // Tell PackageManager about changes to primary volume state, but only
         // when not emulated.
-        if (volume.isPrimary() && !volume.isEmulated()) {
+        if (volume.isExternalApps()) {
             if (Environment.MEDIA_UNMOUNTED.equals(state)) {
                 mPms.updateExternalMediaStatus(false, false);
 
@@ -1083,7 +1083,7 @@ class MountService extends IMountService.Stub
         Runtime.getRuntime().gc();
 
         // Redundant probably. But no harm in updating state again.
-        if (isPrimaryStorage(path)) {
+        if (isExternalApps(path)) {
             mPms.updateExternalMediaStatus(false, false);
         }
         try {
@@ -1265,18 +1265,21 @@ class MountService extends IMountService.Stub
                     // resource parser does not support longs, so XML value is in megabytes
                     long maxFileSize = a.getInt(
                             com.android.internal.R.styleable.Storage_maxFileSize, 0) * 1024L * 1024L;
+                    boolean externalApps = a.getBoolean(
+                            com.android.internal.R.styleable.Storage_externalApps, false);
 
                     Slog.d(TAG, "got storage path: " + path + " description: " + description +
                             " primary: " + primary + " removable: " + removable +
                             " emulated: " + emulated +  " mtpReserve: " + mtpReserve +
                             " allowMassStorage: " + allowMassStorage +
-                            " maxFileSize: " + maxFileSize);
+                            " maxFileSize: " + maxFileSize +
+                            " externalApps: " + externalApps);
 
                     if (emulated && primary) {
                         // For devices with emulated primary storage,
                         // we create separate volumes for each known user.
                         mEmulatedTemplate = new StorageVolume(null, descriptionId, true, false,
-                                true, mtpReserve, false, maxFileSize, null);
+                                true, mtpReserve, false, maxFileSize, null, externalApps);
 
                         final UserManagerService userManager = UserManagerService.getInstance();
                         for (UserInfo user : userManager.getUsers(false)) {
@@ -1289,7 +1292,7 @@ class MountService extends IMountService.Stub
                         } else {
                             final StorageVolume volume = new StorageVolume(new File(path),
                                     descriptionId, primary, removable, emulated, mtpReserve,
-                                    allowMassStorage, maxFileSize, null);
+                                    allowMassStorage, maxFileSize, null, externalApps);
                             addVolumeLocked(volume);
 
                             // Until we hear otherwise, treat as unmounted
@@ -1542,6 +1545,17 @@ class MountService extends IMountService.Stub
         }
     }
 
+    private boolean isExternalApps(String path) {
+        synchronized (mVolumesLock) {
+            for (StorageVolume volume : mVolumes) {
+                if (volume.isExternalApps() && volume.getPath().equals(path)) {
+                    return true;
+                }
+            }
+            return false;
+        }
+    }
+
     private boolean isPrimaryStorage(String path) {
         synchronized (mVolumesLock) {
             for (StorageVolume volume : mVolumes) {
-- 
1.9.1

